require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const Database = require('./database');
const ScoringSystem = require('./scoring');
const moment = require('moment');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª–∏ –¥–ª—è –º–æ–º–µ–Ω—Ç–∞
moment.locale('ru');

class PredictionBot {
    constructor() {
        this.token = process.env.BOT_TOKEN;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        const adminIds = process.env.ADMIN_IDS;
        if (adminIds) {
            this.adminIds = adminIds.split(',').map(id => parseInt(id.trim())).filter(id => !isNaN(id));
        } else {
            this.adminIds = [];
        }

        // –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        const superAdminId = process.env.SUPER_ADMIN_ID;
        this.superAdminId = superAdminId ? parseInt(superAdminId) : (this.adminIds[0] || null);
        
        if (!this.token) {
            throw new Error('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }

        if (this.adminIds.length === 0) {
            console.warn('‚ö†Ô∏è ADMIN_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!');
        }

        this.bot = new TelegramBot(this.token, { polling: true });
        this.db = new Database();
        
        // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–µ–π
        this.userStates = new Map();
        
        this.initializeAdmins();
        this.setupHandlers();
        console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
        console.log(`üë• –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${this.adminIds.length}`);
        if (this.superAdminId) {
            console.log(`üîë –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${this.superAdminId}`);
        }
    }

    async initializeAdmins() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try {
            for (const adminId of this.adminIds) {
                const isSuperAdmin = adminId === this.superAdminId;
                await this.db.addAdmin(adminId, null, null, null, isSuperAdmin, null);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', error);
        }
    }

    async isAdmin(userId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if (this.adminIds.includes(userId)) {
            return true;
        }
        
        try {
            return await this.db.isAdmin(userId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
            return false;
        }
    }

    async isSuperAdmin(userId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if (userId === this.superAdminId) {
            return true;
        }
        
        try {
            return await this.db.isSuperAdmin(userId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
            return false;
        }
    }

    setupHandlers() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        this.bot.onText(/\/start/, this.handleStart.bind(this));
        this.bot.onText(/\/help/, this.handleHelp.bind(this));
        this.bot.onText(/\/matches/, this.handleMatches.bind(this));
        this.bot.onText(/\/leaderboard/, this.handleLeaderboard.bind(this));
        this.bot.onText(/\/stats/, this.handleStats.bind(this));
        this.bot.onText(/\/predict (\d+) (\d+):(\d+)/, this.handlePredictCommand.bind(this));
        
        // –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        this.bot.onText(/\/addmatch/, this.handleAddMatch.bind(this));
        this.bot.onText(/\/finishmatch (\d+) (\d+):(\d+)/, this.handleFinishMatch.bind(this));
        this.bot.onText(/\/addpoints/, this.handleAddPoints.bind(this));
        this.bot.onText(/\/setpoints/, this.handleSetPoints.bind(this));
        this.bot.onText(/\/pointshistory/, this.handlePointsHistory.bind(this));
        this.bot.onText(/\/newseason/, this.handleNewSeason.bind(this));
        this.bot.onText(/\/currentseason/, this.handleCurrentSeason.bind(this));
        this.bot.onText(/\/seasonhistory/, this.handleSeasonHistory.bind(this));
        this.bot.onText(/\/admins/, this.handleAdmins.bind(this));
        this.bot.onText(/\/addadmin/, this.handleAddAdmin.bind(this));
        this.bot.onText(/\/removeadmin/, this.handleRemoveAdmin.bind(this));
        this.bot.onText(/\/cancel/, this.handleCancel.bind(this));

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–∞–Ω–Ω—ã—Ö
        this.bot.on('callback_query', this.handleCallback.bind(this));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.bot.on('message', this.handleMessage.bind(this));

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        this.bot.on('error', (error) => {
            console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
        });

        this.bot.on('polling_error', (error) => {
            console.error('–û—à–∏–±–∫–∞ polling:', error);
        });
    }

    async handleStart(msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const username = msg.from.username;
        const firstName = msg.from.first_name;
        const lastName = msg.from.last_name;

        try {
            await this.db.addUser(userId, username, firstName, lastName);
            
            const welcomeText = `
üèÜ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ —Ñ—É—Ç–±–æ–ª!*

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –º–∞—Ç—á–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–∞–ª–ª—ã:

üéØ *–¢–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç* ‚Äî 3 –±–∞–ª–ª–∞
üé≤ *–†–∞–∑–Ω–∏—Ü–∞ –º—è—á–µ–π –∏ –∏—Å—Ö–æ–¥* ‚Äî 2 –±–∞–ª–ª–∞  
‚öΩ *–£–≥–∞–¥–∞–Ω–Ω—ã–π –∏—Å—Ö–æ–¥* ‚Äî 1 –±–∞–ª–ª

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.
            `;

            await this.bot.sendMessage(chatId, welcomeText, {
                parse_mode: 'Markdown',
                reply_markup: this.getMainKeyboard()
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        }
    }

    async handleHelp(msg) {
        const chatId = msg.chat.id;
        
        const helpText = `
üìñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:*
/start ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/matches ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏
/leaderboard ‚Äî –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
/stats ‚Äî –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/predict [ID] [—Å—á–µ—Ç] ‚Äî –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑
–ü—Ä–∏–º–µ—Ä: /predict 1 2:1

üîß *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:*
/addmatch ‚Äî –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–∞—Ç—á
/finishmatch [ID] [—Å—á–µ—Ç] ‚Äî –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ç—á
–ü—Ä–∏–º–µ—Ä: /finishmatch 1 2:1
/addpoints ‚Äî –î–æ–±–∞–≤–∏—Ç—å/–æ—Ç–Ω—è—Ç—å –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
/setpoints ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
/pointshistory ‚Äî –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–ª–æ–≤
/newseason ‚Äî –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω (–æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–ª—ã)
/currentseason ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ
/seasonhistory ‚Äî –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Å–µ–∑–æ–Ω–æ–≤
/admins ‚Äî –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
/addadmin ‚Äî –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)
/removeadmin ‚Äî –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)
/cancel ‚Äî –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ

üí° *–ö–∞–∫ –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã:*
1. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏ (/matches)
2. –ù–∞–∂–º–∏—Ç–µ "–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑" –ø–æ–¥ –º–∞—Ç—á–µ–º
3. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–≥–Ω–æ–∑ —Å—á–µ—Ç–∞
4. –ñ–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–∞—Ç—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
        `;

        await this.bot.sendMessage(chatId, helpText, {
            parse_mode: 'Markdown',
            reply_markup: this.getMainKeyboard()
        });
    }

    async handleMatches(msg) {
        const chatId = msg.chat.id;
        
        try {
            const matches = await this.db.getActiveMatches();
            
            if (matches.length === 0) {
                await this.bot.sendMessage(chatId, 'üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.');
                return;
            }

            const text = '‚öΩ *–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏:*\n\n';
            
            for (const match of matches) {
                const matchText = await this.formatMatchInfo(match, msg.from.id);
                const keyboard = this.getMatchKeyboard(match.id);
                
                await this.bot.sendMessage(chatId, matchText, {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π:', error);
            await this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç—á–µ–π.');
        }
    }

    async handleLeaderboard(msg) {
        const chatId = msg.chat.id;
        
        try {
            const currentSeason = await this.db.getCurrentSeason();
            const leaders = await this.db.getLeaderboard(10);
            
            if (leaders.length === 0) {
                await this.bot.sendMessage(chatId, 'üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.');
                return;
            }

            const seasonInfo = currentSeason ? `üèÜ *–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ ${currentSeason.name}:*\n\n` : 'üèÜ *–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:*\n\n';
            let text = seasonInfo;
            
            leaders.forEach((user, index) => {
                const medal = index < 3 ? ['ü•á', 'ü•à', 'ü•â'][index] : `${index + 1}.`;
                const name = user.first_name || user.username || '–ê–Ω–æ–Ω–∏–º';
                text += `${medal} ${name} ‚Äî ${user.total_points} –±–∞–ª–ª${this.getPointsWord(user.total_points)}\n`;
            });

            if (currentSeason) {
                const startDate = moment(currentSeason.start_date).format('DD.MM.YYYY');
                const duration = moment().diff(moment(currentSeason.start_date), 'days');
                text += `\nüìÖ –°–µ–∑–æ–Ω –Ω–∞—á–∞—Ç: ${startDate} (${duration} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)`;
            }

            await this.bot.sendMessage(chatId, text, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤:', error);
            await this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤.');
        }
    }

    async handleStats(msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        
        try {
            const user = await this.db.getUser(userId);
            const currentSeason = await this.db.getCurrentSeason();
            const stats = await this.db.getUserStats(userId);
            
            if (!user) {
                await this.bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
                return;
            }

            const name = user.first_name || user.username || '–ê–Ω–æ–Ω–∏–º';
            const seasonInfo = currentSeason ? ` (${currentSeason.name})` : '';
            
            let text = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${name}${seasonInfo}:*\n\n`;
            text += `üèÜ –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: ${user.total_points} –±–∞–ª–ª${this.getPointsWord(user.total_points)}\n`;
            
            if (stats && stats.total_predictions > 0) {
                text += `üìà –í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: ${stats.total_predictions}\n`;
                text += `üéØ –¢–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${stats.exact_predictions || 0}\n`;
                text += `üé≤ –†–∞–∑–Ω–∏—Ü–∞ + –∏—Å—Ö–æ–¥: ${stats.close_predictions || 0}\n`;
                text += `‚öΩ –¢–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥: ${stats.outcome_predictions || 0}\n`;
                
                const accuracy = ((stats.exact_predictions || 0) / stats.total_predictions * 100).toFixed(1);
                text += `üìä –¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy}%`;
            } else {
                text += '\nü§∑‚Äç‚ôÇÔ∏è –ü—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç. –°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π!';
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ–∑–æ–Ω–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
            if (currentSeason && currentSeason.season_number > 1) {
                try {
                    const prevSeasonStats = await this.db.getUserSeasonStats(userId, currentSeason.season_number - 1);
                    if (prevSeasonStats && !prevSeasonStats.is_current) {
                        text += `\n\nüìö *–ü—Ä–æ—à–ª—ã–π —Å–µ–∑–æ–Ω:*\n`;
                        text += `üèÜ –ú–µ—Å—Ç–æ: ${prevSeasonStats.position}\n`;
                        text += `üìä –ë–∞–ª–ª—ã: ${prevSeasonStats.final_points}\n`;
                        text += `üéØ –¢–æ—á–Ω—ã—Ö: ${prevSeasonStats.exact_predictions}`;
                    }
                } catch (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—à–ª–æ–≥–æ —Å–µ–∑–æ–Ω–∞:', err);
                }
            }

            await this.bot.sendMessage(chatId, text, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            await this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
        }
    }

    async handlePredictCommand(msg, match) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const matchId = parseInt(match[1]);
        const predA = parseInt(match[2]);
        const predB = parseInt(match[3]);

        await this.makePrediction(chatId, userId, matchId, predA, predB);
    }

    async handleAddMatch(msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!(await this.isAdmin(userId))) {
            await this.bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–µ–π.');
            return;
        }

        this.userStates.set(userId, { action: 'add_match', step: 'team_a' });
        await this.bot.sendMessage(chatId, '‚öΩ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã:', {
            reply_markup: { 
                keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']], 
                resize_keyboard: true 
            }
        });
    }

    async handleFinishMatch(msg, match) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!(await this.isAdmin(userId))) {
            await this.bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–µ–π.');
            return;
        }

        const matchId = parseInt(match[1]);
        const resultA = parseInt(match[2]);
        const resultB = parseInt(match[3]);

        await this.finishMatch(chatId, matchId, resultA, resultB);
    }

    async handleCancel(msg) {
        const userId = msg.from.id;
        const chatId = msg.chat.id;

        this.userStates.delete(userId);
        await this.bot.sendMessage(chatId, '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', {
            reply_markup: this.getMainKeyboard()
        });
    }

    async handleCallback(callbackQuery) {
        const data = callbackQuery.data;
        const chatId = callbackQuery.message.chat.id;
        const userId = callbackQuery.from.id;

        try {
            if (data.startsWith('predict_')) {
                const matchId = parseInt(data.split('_')[1]);
                await this.startPredictionProcess(chatId, userId, matchId);
            }

            await this.bot.answerCallbackQuery(callbackQuery.id);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
            await this.bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
        }
    }

    async handleMessage(msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const text = msg.text;

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if (text && text.startsWith('/')) return;

        const userState = this.userStates.get(userId);
        if (!userState) return;

        try {
            if (text === '‚ùå –û—Ç–º–µ–Ω–∞') {
                await this.handleCancel(msg);
                return;
            }

            if (userState.action === 'add_match') {
                await this.handleAddMatchProcess(msg, userState);
            } else if (userState.action === 'make_prediction') {
                await this.handlePredictionProcess(msg, userState);
            } else if (userState.action === 'add_points') {
                await this.handleAddPointsProcess(msg, userState);
            } else if (userState.action === 'set_points') {
                await this.handleSetPointsProcess(msg, userState);
            } else if (userState.action === 'new_season') {
                await this.handleNewSeasonProcess(msg, userState);
            } else if (userState.action === 'add_admin') {
                await this.handleAddAdminProcess(msg, userState);
            } else if (userState.action === 'remove_admin') {
                await this.handleRemoveAdminProcess(msg, userState);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }

    async handleAddMatchProcess(msg, userState) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const text = msg.text;

        if (userState.step === 'team_a') {
            userState.teamA = text;
            userState.step = 'team_b';
            await this.bot.sendMessage(chatId, '‚öΩ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã:');
        } else if (userState.step === 'team_b') {
            userState.teamB = text;
            userState.step = 'date';
            await this.bot.sendMessage(chatId, 'üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–∞—Ç—á–∞ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):\n–ü—Ä–∏–º–µ—Ä: 25.12.2023 20:00');
        } else if (userState.step === 'date') {
            const matchDate = this.parseDate(text);
            if (!matchDate) {
                await this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú');
                return;
            }

            try {
                const matchId = await this.db.addMatch(userState.teamA, userState.teamB, matchDate.toISOString());
                this.userStates.delete(userId);
                
                await this.bot.sendMessage(chatId, 
                    `‚úÖ –ú–∞—Ç—á –¥–æ–±–∞–≤–ª–µ–Ω!\n\n‚öΩ ${userState.teamA} ‚Äî ${userState.teamB}\nüìÖ ${matchDate.format('DD.MM.YYYY HH:mm')}`,
                    { reply_markup: this.getMainKeyboard() }
                );
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞:', error);
                await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞.');
            }
        }
    }

    async handlePredictionProcess(msg, userState) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const text = msg.text;

        const match = text.match(/^(\d+):(\d+)$/);
        if (!match) {
            await this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "X:Y" (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2:1)');
            return;
        }

        const predA = parseInt(match[1]);
        const predB = parseInt(match[2]);

        if (!ScoringSystem.isValidPrediction(predA, predB)) {
            await this.bot.sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑. –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 20 –≥–æ–ª–æ–≤.');
            return;
        }

        await this.makePrediction(chatId, userId, userState.matchId, predA, predB);
        this.userStates.delete(userId);
    }

    async startPredictionProcess(chatId, userId, matchId) {
        try {
            const match = await this.db.getMatch(matchId);
            if (!match) {
                await this.bot.sendMessage(chatId, '‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                return;
            }

            if (match.is_finished) {
                await this.bot.sendMessage(chatId, '‚ùå –ú–∞—Ç—á —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å –ª–∏ –≤—Ä–µ–º—è –º–∞—Ç—á–∞
            const matchTime = moment(match.match_date);
            if (moment().isAfter(matchTime)) {
                await this.bot.sendMessage(chatId, '‚ùå –í—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ç—á –∏—Å—Ç–µ–∫–ª–æ.');
                return;
            }

            this.userStates.set(userId, { action: 'make_prediction', matchId: matchId });
            
            const existing = await this.db.getPrediction(userId, matchId);
            const existingText = existing ? `\n\nüîÑ –í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑: ${ScoringSystem.formatPrediction(existing.prediction_a, existing.prediction_b)}` : '';
            
            await this.bot.sendMessage(chatId, 
                `‚öΩ ${match.team_a} ‚Äî ${match.team_b}\nüìÖ ${moment(match.match_date).format('DD.MM.YYYY HH:mm')}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "X:Y" (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2:1):${existingText}`,
                {
                    reply_markup: { 
                        keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']], 
                        resize_keyboard: true 
                    }
                }
            );
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞.');
        }
    }

    async makePrediction(chatId, userId, matchId, predA, predB) {
        try {
            const match = await this.db.getMatch(matchId);
            if (!match) {
                await this.bot.sendMessage(chatId, '‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                return;
            }

            if (match.is_finished) {
                await this.bot.sendMessage(chatId, '‚ùå –ú–∞—Ç—á —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
            const matchTime = moment(match.match_date);
            if (moment().isAfter(matchTime)) {
                await this.bot.sendMessage(chatId, '‚ùå –í—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ç—á –∏—Å—Ç–µ–∫–ª–æ.');
                return;
            }

            await this.db.addPrediction(userId, matchId, predA, predB);
            
            await this.bot.sendMessage(chatId, 
                `‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–Ω—è—Ç!\n\n‚öΩ ${match.team_a} ‚Äî ${match.team_b}\nüîÆ –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑: ${ScoringSystem.formatPrediction(predA, predB)}\nüìÖ –ú–∞—Ç—á: ${moment(match.match_date).format('DD.MM.YYYY HH:mm')}`,
                { reply_markup: this.getMainKeyboard() }
            );
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞.');
        }
    }

    async finishMatch(chatId, matchId, resultA, resultB) {
        try {
            const match = await this.db.getMatch(matchId);
            if (!match) {
                await this.bot.sendMessage(chatId, '‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                return;
            }

            if (match.is_finished) {
                await this.bot.sendMessage(chatId, '‚ùå –ú–∞—Ç—á —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.');
                return;
            }

            // –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—Ç—á
            await this.db.finishMatch(matchId, resultA, resultB);

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ç—á
            const predictions = await this.db.getPredictionsForMatch(matchId);

            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
            for (const prediction of predictions) {
                const points = ScoringSystem.calculatePoints(
                    prediction.prediction_a, 
                    prediction.prediction_b, 
                    resultA, 
                    resultB
                );

                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ
                await this.db.updatePredictionPoints(prediction.user_id, matchId, points);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if (points > 0) {
                    await this.db.updateUserPoints(prediction.user_id, points);
                }
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            let resultText = `üèÅ *–ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n`;
            resultText += `‚öΩ ${match.team_a} ${resultA}:${resultB} ${match.team_b}\n\n`;
            
            if (predictions.length > 0) {
                resultText += `üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:*\n\n`;
                
                predictions.forEach(pred => {
                    const points = ScoringSystem.calculatePoints(pred.prediction_a, pred.prediction_b, resultA, resultB);
                    const name = pred.first_name || pred.username || '–ê–Ω–æ–Ω–∏–º';
                    const emoji = ScoringSystem.getPointsEmoji(points);
                    resultText += `${emoji} ${name}: ${ScoringSystem.formatPrediction(pred.prediction_a, pred.prediction_b)} (+${points})\n`;
                });
            } else {
                resultText += `üòî –ù–∞ —ç—Ç–æ—Ç –º–∞—Ç—á –Ω–µ –±—ã–ª–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.`;
            }

            await this.bot.sendMessage(chatId, resultText, { parse_mode: 'Markdown' });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–∞—Ç—á–∞:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–∞—Ç—á–∞.');
        }
    }

    async handleAddPoints(msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!(await this.isAdmin(userId))) {
            await this.bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤.');
            return;
        }

        this.userStates.set(userId, { action: 'add_points', step: 'user_search' });
        await this.bot.sendMessage(chatId, 'üë§ –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å @ –∏–ª–∏ –±–µ–∑) –∏–ª–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:', {
            reply_markup: { 
                keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']], 
                resize_keyboard: true 
            }
        });
    }

    async handleSetPoints(msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!(await this.isAdmin(userId))) {
            await this.bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤.');
            return;
        }

        this.userStates.set(userId, { action: 'set_points', step: 'user_search' });
        await this.bot.sendMessage(chatId, 'üë§ –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å @ –∏–ª–∏ –±–µ–∑) –∏–ª–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:', {
            reply_markup: { 
                keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']], 
                resize_keyboard: true 
            }
        });
    }

    async handlePointsHistory(msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!(await this.isAdmin(userId))) {
            await this.bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏.');
            return;
        }

        try {
            const history = await this.db.getPointsHistory(null, 15);
            
            if (history.length === 0) {
                await this.bot.sendMessage(chatId, 'üìä –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–ª–æ–≤ –ø—É—Å—Ç–∞.');
                return;
            }

            let text = 'üìä *–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–ª–æ–≤:*\n\n';
            
            history.forEach((record, index) => {
                const userName = record.user_first_name || record.user_username || '–ê–Ω–æ–Ω–∏–º';
                const adminName = record.admin_first_name || record.admin_username || '–ê–¥–º–∏–Ω';
                const actionText = record.action_type === 'add' ? '–¥–æ–±–∞–≤–∏–ª' : '—É—Å—Ç–∞–Ω–æ–≤–∏–ª';
                const pointsText = record.action_type === 'add' ? 
                    `${record.points_change > 0 ? '+' : ''}${record.points_change}` : 
                    `${record.new_total} (–±—ã–ª–æ ${record.old_total})`;
                
                const date = moment(record.created_at).format('DD.MM HH:mm');
                
                text += `${index + 1}. ${userName}: ${actionText} ${pointsText} –±–∞–ª–ª${this.getPointsWord(Math.abs(record.points_change))}\n`;
                text += `   üî∏ ${adminName}, ${date}`;
                if (record.reason) {
                    text += `\n   üí¨ "${record.reason}"`;
                }
                text += '\n\n';
            });

            await this.bot.sendMessage(chatId, text, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.');
        }
    }

    async handleAddPointsProcess(msg, userState) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const text = msg.text;

        if (userState.step === 'user_search') {
            await this.processUserSearch(chatId, userId, text, userState, 'add_points');
        } else if (userState.step === 'points_amount') {
            await this.processPointsAmount(chatId, userId, text, userState, 'add');
        } else if (userState.step === 'reason') {
            await this.processPointsReason(chatId, userId, text, userState, 'add');
        }
    }

    async handleSetPointsProcess(msg, userState) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const text = msg.text;

        if (userState.step === 'user_search') {
            await this.processUserSearch(chatId, userId, text, userState, 'set_points');
        } else if (userState.step === 'points_amount') {
            await this.processPointsAmount(chatId, userId, text, userState, 'set');
        } else if (userState.step === 'reason') {
            await this.processPointsReason(chatId, userId, text, userState, 'set');
        }
    }

    async processUserSearch(chatId, userId, searchText, userState, action) {
        try {
            // –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
            const cleanSearch = searchText.replace('@', '');
            
            const users = await this.db.searchUserByUsernameOrName(cleanSearch);
            
            if (users.length === 0) {
                await this.bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.');
                return;
            }

            if (users.length === 1) {
                // –ù–∞–π–¥–µ–Ω –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                userState.targetUser = users[0];
                userState.step = 'points_amount';
                
                const userName = users[0].first_name || users[0].username || '–ê–Ω–æ–Ω–∏–º';
                const actionText = action === 'add_points' ? '–¥–æ–±–∞–≤–∏—Ç—å' : '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å';
                
                await this.bot.sendMessage(chatId, 
                    `‚úÖ –í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName} (${users[0].total_points} –±–∞–ª–ª${this.getPointsWord(users[0].total_points)})\n\n` +
                    `üíØ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è ${actionText === '–¥–æ–±–∞–≤–∏—Ç—å' ? '–¥–æ–±–∞–≤–ª–µ–Ω–∏—è' : '—É—Å—Ç–∞–Ω–æ–≤–∫–∏'}:\n` +
                    `${action === 'add_points' ? '(–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ + –∏–ª–∏ - –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–≤—ã—á–∏—Ç–∞–Ω–∏—è)' : '(—É–∫–∞–∂–∏—Ç–µ –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤)'}`
                );
            } else {
                // –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                let text = 'üë• –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å:\n\n';
                
                users.slice(0, 10).forEach((user, index) => {
                    const name = user.first_name || user.username || '–ê–Ω–æ–Ω–∏–º';
                    const username = user.username ? `@${user.username}` : '';
                    text += `${index + 1}. ${name} ${username} (${user.total_points} –±–∞–ª–ª${this.getPointsWord(user.total_points)})\n`;
                });
                
                if (users.length > 10) {
                    text += `\n... –∏ –µ—â–µ ${users.length - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;
                }

                await this.bot.sendMessage(chatId, text);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        }
    }

    async processPointsAmount(chatId, userId, text, userState, action) {
        const points = parseInt(text);
        
        if (isNaN(points)) {
            await this.bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.');
            return;
        }

        if (action === 'set' && points < 0) {
            await this.bot.sendMessage(chatId, '‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ.');
            return;
        }

        userState.points = points;
        userState.step = 'reason';
        
        const userName = userState.targetUser.first_name || userState.targetUser.username || '–ê–Ω–æ–Ω–∏–º';
        const actionText = action === 'add' ? 
            `${points > 0 ? '–¥–æ–±–∞–≤–∏—Ç—å' : '–æ—Ç–Ω—è—Ç—å'} ${Math.abs(points)}` : 
            `—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ${points}`;
        
        await this.bot.sendMessage(chatId, 
            `üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –¥–ª—è ${userName} (${actionText} –±–∞–ª–ª${this.getPointsWord(Math.abs(points))}):\n\n` +
            `–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.`,
            {
                reply_markup: { 
                    keyboard: [['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'], ['‚ùå –û—Ç–º–µ–Ω–∞']], 
                    resize_keyboard: true 
                }
            }
        );
    }

    async processPointsReason(chatId, userId, text, userState, action) {
        try {
            const reason = text === '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' ? null : text;
            const targetUserId = userState.targetUser.telegram_id;
            const points = userState.points;
            
            let result;
            if (action === 'add') {
                result = await this.db.addPointsToUser(targetUserId, points, userId, reason);
            } else {
                result = await this.db.setUserPoints(targetUserId, points, userId, reason);
            }

            this.userStates.delete(userId);
            
            const userName = userState.targetUser.first_name || userState.targetUser.username || '–ê–Ω–æ–Ω–∏–º';
            const actionText = action === 'add' ? 
                `${points > 0 ? '–¥–æ–±–∞–≤–ª–µ–Ω–æ' : '–æ—Ç–Ω—è—Ç–æ'} ${Math.abs(points)}` : 
                `—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${points}`;
            
            let responseText = `‚úÖ –ë–∞–ª–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n`;
            responseText += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}\n`;
            responseText += `üìä –ë—ã–ª–æ: ${result.oldTotal} –±–∞–ª–ª${this.getPointsWord(result.oldTotal)}\n`;
            responseText += `üìä –°—Ç–∞–ª–æ: ${result.newTotal} –±–∞–ª–ª${this.getPointsWord(result.newTotal)}\n`;
            responseText += `üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${actionText} –±–∞–ª–ª${this.getPointsWord(Math.abs(points))}`;
            
            if (reason) {
                responseText += `\nüí¨ –ü—Ä–∏—á–∏–Ω–∞: ${reason}`;
            }

            await this.bot.sendMessage(chatId, responseText, {
                reply_markup: this.getMainKeyboard()
            });

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤
            if (targetUserId !== userId) {
                try {
                    let notificationText = `üîî –í–∞—à–∏ –±–∞–ª–ª—ã –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n\n`;
                    notificationText += `üìä –ë—ã–ª–æ: ${result.oldTotal} –±–∞–ª–ª${this.getPointsWord(result.oldTotal)}\n`;
                    notificationText += `üìä –°—Ç–∞–ª–æ: ${result.newTotal} –±–∞–ª–ª${this.getPointsWord(result.newTotal)}\n`;
                    notificationText += `üîÑ ${actionText} –±–∞–ª–ª${this.getPointsWord(Math.abs(points))}`;
                    
                    if (reason) {
                        notificationText += `\nüí¨ –ü—Ä–∏—á–∏–Ω–∞: ${reason}`;
                    }

                    await this.bot.sendMessage(targetUserId, notificationText);
                } catch (error) {
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error.message);
                }
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤: ' + error.message);
        }
    }

    async handleNewSeason(msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!(await this.isAdmin(userId))) {
            await this.bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞.');
            return;
        }

        try {
            const currentSeason = await this.db.getCurrentSeason();
            if (!currentSeason) {
                await this.bot.sendMessage(chatId, '‚ùå –¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                return;
            }

            this.userStates.set(userId, { action: 'new_season', step: 'confirm' });
            
            await this.bot.sendMessage(chatId, 
                `‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï!*\n\n–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω.\n\n` +
                `üìä –¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω: ${currentSeason.name}\n` +
                `üîÑ –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n` +
                `‚Ä¢ –ó–∞–∫—Ä–æ–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω\n` +
                `‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∞—Ä—Ö–∏–≤\n` +
                `‚Ä¢ –û–±–Ω—É–ª–∏—Ç –±–∞–ª–ª—ã –í–°–ï–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n` +
                `‚Ä¢ –°–æ–∑–¥–∞—Å—Ç –°–µ–∑–æ–Ω ${currentSeason.season_number + 1}\n\n` +
                `–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞ –∏–ª–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è:`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: { 
                        keyboard: [['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'], ['‚ùå –û—Ç–º–µ–Ω–∞']], 
                        resize_keyboard: true 
                    }
                }
            );
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ–∑–æ–Ω–∞:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–µ.');
        }
    }

    async handleCurrentSeason(msg) {
        const chatId = msg.chat.id;

        try {
            const currentSeason = await this.db.getCurrentSeason();
            if (!currentSeason) {
                await this.bot.sendMessage(chatId, '‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π —Å–µ–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                return;
            }

            const startDate = moment(currentSeason.start_date).format('DD.MM.YYYY');
            const duration = moment().diff(moment(currentSeason.start_date), 'days');

            let text = `üèÜ *${currentSeason.name}*\n\n`;
            text += `üìÖ –ù–∞—á–∞—Ç: ${startDate}\n`;
            text += `‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration} –¥–Ω–µ–π\n`;
            text += `üî¢ –ù–æ–º–µ—Ä —Å–µ–∑–æ–Ω–∞: ${currentSeason.season_number}`;

            await this.bot.sendMessage(chatId, text, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–µ:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–∑–æ–Ω–µ.');
        }
    }

    async handleSeasonHistory(msg) {
        const chatId = msg.chat.id;

        try {
            const seasons = await this.db.getSeasonHistory(10);
            
            if (seasons.length === 0) {
                await this.bot.sendMessage(chatId, 'üìä –ò—Å—Ç–æ—Ä–∏—è —Å–µ–∑–æ–Ω–æ–≤ –ø—É—Å—Ç–∞.');
                return;
            }

            let text = 'üìö *–ò—Å—Ç–æ—Ä–∏—è —Å–µ–∑–æ–Ω–æ–≤:*\n\n';
            
            for (const season of seasons) {
                const startDate = moment(season.start_date).format('DD.MM.YYYY');
                const endDate = season.end_date ? moment(season.end_date).format('DD.MM.YYYY') : '–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è';
                const status = season.is_active ? 'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π' : 'üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω';
                
                text += `${season.season_number}. **${season.name}** ${status}\n`;
                text += `   üìÖ ${startDate} ‚Äî ${endDate}\n`;
                
                if (!season.is_active) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 —Å–µ–∑–æ–Ω–∞
                    try {
                        const results = await this.db.getSeasonResults(season.season_number, 3);
                        if (results.length > 0) {
                            text += `   üèÜ –¢–æ–ø-3: `;
                            results.forEach((result, index) => {
                                const name = result.first_name || result.username || '–ê–Ω–æ–Ω–∏–º';
                                const medal = ['ü•á', 'ü•à', 'ü•â'][index] || `${index + 1}.`;
                                text += `${medal}${name}(${result.final_points}) `;
                            });
                            text += '\n';
                        }
                    } catch (err) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ–∑–æ–Ω–∞:', err);
                    }
                }
                text += '\n';
            }

            await this.bot.sendMessage(chatId, text, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ–∑–æ–Ω–æ–≤:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ–∑–æ–Ω–æ–≤.');
        }
    }

    async handleNewSeasonProcess(msg, userState) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const text = msg.text;

        if (userState.step === 'confirm') {
            try {
                const seasonName = text === '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' ? null : text;
                
                const result = await this.db.createNewSeason(seasonName, userId);
                this.userStates.delete(userId);

                let responseText = `üéâ *–ù–æ–≤—ã–π —Å–µ–∑–æ–Ω –Ω–∞—á–∞—Ç!*\n\n`;
                responseText += `üèÜ –°–µ–∑–æ–Ω: ${result.seasonName}\n`;
                responseText += `üî¢ –ù–æ–º–µ—Ä: ${result.newSeasonNumber}\n`;
                responseText += `üë• –û–±–Ω—É–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.usersReset}\n\n`;
                responseText += `üöÄ –ñ–µ–ª–∞–µ–º –≤—Å–µ–º —É–¥–∞—á–∏ –≤ –Ω–æ–≤–æ–º —Å–µ–∑–æ–Ω–µ!`;

                await this.bot.sendMessage(chatId, responseText, {
                    parse_mode: 'Markdown',
                    reply_markup: this.getMainKeyboard()
                });

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                await this.notifyAllUsersAboutNewSeason(result.seasonName, result.newSeasonNumber);

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞:', error);
                await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞: ' + error.message);
                this.userStates.delete(userId);
            }
        }
    }

    async notifyAllUsersAboutNewSeason(seasonName, seasonNumber) {
        try {
            const users = await this.db.getLeaderboard(1000); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            
            for (const user of users) {
                if (!(await this.isAdmin(user.telegram_id))) {
                    try {
                        await this.bot.sendMessage(user.telegram_id, 
                            `üéâ *–ù–∞—á–∞–ª—Å—è –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω!*\n\n` +
                            `üèÜ ${seasonName}\n` +
                            `üî¢ –°–µ–∑–æ–Ω #${seasonNumber}\n\n` +
                            `üìä –í–∞—à–∏ –±–∞–ª–ª—ã –æ–±–Ω—É–ª–µ–Ω—ã.\n` +
                            `üöÄ –£–¥–∞—á–∏ –≤ –Ω–æ–≤–æ–º —Å–µ–∑–æ–Ω–µ!`,
                            { parse_mode: 'Markdown' }
                        );
                        
                        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                        await new Promise(resolve => setTimeout(resolve, 100));
                    } catch (error) {
                        console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, error.message);
                    }
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–º —Å–µ–∑–æ–Ω–µ:', error);
        }
    }

    async handleAdmins(msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!(await this.isAdmin(userId))) {
            await this.bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
            return;
        }

        try {
            const admins = await this.db.getAdmins();
            
            if (admins.length === 0) {
                await this.bot.sendMessage(chatId, 'üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.');
                return;
            }

            let text = 'üë• *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞:*\n\n';
            
            admins.forEach((admin, index) => {
                const name = admin.first_name || admin.username || `ID: ${admin.user_id}`;
                const role = admin.is_super_admin ? 'üîë –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω' : 'üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
                const status = admin.is_active ? 'üü¢' : 'üî¥';
                text += `${index + 1}. ${status} ${name}\n   ${role}\n`;
                if (admin.added_at) {
                    text += `   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: ${moment(admin.added_at).format('DD.MM.YYYY')}\n`;
                }
                text += '\n';
            });

            await this.bot.sendMessage(chatId, text, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
        }
    }

    async handleAddAdmin(msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!(await this.isSuperAdmin(userId))) {
            await this.bot.sendMessage(chatId, '‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
            return;
        }

        this.userStates.set(userId, { action: 'add_admin', step: 'user_search' });
        await this.bot.sendMessage(chatId, 'üë§ –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å @ –∏–ª–∏ –±–µ–∑) –∏–ª–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:', {
            reply_markup: { 
                keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']], 
                resize_keyboard: true 
            }
        });
    }

    async handleRemoveAdmin(msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!(await this.isSuperAdmin(userId))) {
            await this.bot.sendMessage(chatId, '‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
            return;
        }

        try {
            const admins = await this.db.getAdmins();
            const otherAdmins = admins.filter(admin => admin.user_id !== userId && admin.is_active);
            
            if (otherAdmins.length === 0) {
                await this.bot.sendMessage(chatId, 'üë• –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
                return;
            }

            this.userStates.set(userId, { action: 'remove_admin', step: 'select_admin', admins: otherAdmins });
            
            let text = 'üë• –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n';
            otherAdmins.forEach((admin, index) => {
                const name = admin.first_name || admin.username || `ID: ${admin.user_id}`;
                const role = admin.is_super_admin ? 'üîë' : 'üîß';
                text += `${index + 1}. ${role} ${name}\n`;
            });
            text += '\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:';

            await this.bot.sendMessage(chatId, text, {
                reply_markup: { 
                    keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']], 
                    resize_keyboard: true 
                }
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
        }
    }

    async handleAddAdminProcess(msg, userState) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const text = msg.text;

        if (userState.step === 'user_search') {
            await this.processUserSearchForAdmin(chatId, userId, text, userState);
        } else if (userState.step === 'confirm') {
            await this.processAddAdminConfirm(chatId, userId, text, userState);
        }
    }

    async handleRemoveAdminProcess(msg, userState) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const text = msg.text;

        if (userState.step === 'select_admin') {
            await this.processRemoveAdminSelect(chatId, userId, text, userState);
        }
    }

    async processUserSearchForAdmin(chatId, userId, searchText, userState) {
        try {
            const cleanSearch = searchText.replace('@', '');
            const users = await this.db.searchUserByUsernameOrName(cleanSearch);
            
            if (users.length === 0) {
                await this.bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.');
                return;
            }

            if (users.length === 1) {
                const targetUser = users[0];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                if (await this.isAdmin(targetUser.telegram_id)) {
                    await this.bot.sendMessage(chatId, '‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.');
                    return;
                }

                userState.targetUser = targetUser;
                userState.step = 'confirm';
                
                const userName = targetUser.first_name || targetUser.username || '–ê–Ω–æ–Ω–∏–º';
                
                await this.bot.sendMessage(chatId, 
                    `‚úÖ –í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}\n\n` +
                    `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:`,
                    {
                        reply_markup: { 
                            keyboard: [['–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'], ['‚ùå –û—Ç–º–µ–Ω–∞']], 
                            resize_keyboard: true 
                        }
                    }
                );
            } else {
                let text = 'üë• –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å:\n\n';
                users.slice(0, 10).forEach((user, index) => {
                    const name = user.first_name || user.username || '–ê–Ω–æ–Ω–∏–º';
                    const username = user.username ? `@${user.username}` : '';
                    text += `${index + 1}. ${name} ${username}\n`;
                });
                
                await this.bot.sendMessage(chatId, text);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        }
    }

    async processAddAdminConfirm(chatId, userId, text, userState) {
        if (text !== '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å') {
            await this.bot.sendMessage(chatId, '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            this.userStates.delete(userId);
            return;
        }

        try {
            const targetUser = userState.targetUser;
            
            await this.db.addAdmin(
                targetUser.telegram_id, 
                targetUser.username, 
                targetUser.first_name, 
                targetUser.last_name, 
                false, 
                userId
            );

            this.userStates.delete(userId);
            
            const userName = targetUser.first_name || targetUser.username || '–ê–Ω–æ–Ω–∏–º';
            
            await this.bot.sendMessage(chatId, 
                `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã!`,
                { reply_markup: this.getMainKeyboard() }
            );

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            try {
                await this.bot.sendMessage(targetUser.telegram_id, 
                    `üéâ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!\n\n` +
                    `–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.`
                );
            } catch (error) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:', error.message);
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
            this.userStates.delete(userId);
        }
    }

    async processRemoveAdminSelect(chatId, userId, text, userState) {
        const adminIndex = parseInt(text) - 1;
        
        if (isNaN(adminIndex) || adminIndex < 0 || adminIndex >= userState.admins.length) {
            await this.bot.sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ' + userState.admins.length);
            return;
        }

        try {
            const targetAdmin = userState.admins[adminIndex];
            
            await this.db.removeAdmin(targetAdmin.user_id, userId);
            this.userStates.delete(userId);
            
            const adminName = targetAdmin.first_name || targetAdmin.username || `ID: ${targetAdmin.user_id}`;
            
            await this.bot.sendMessage(chatId, 
                `‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${adminName} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞!`,
                { reply_markup: this.getMainKeyboard() }
            );

            // –£–≤–µ–¥–æ–º–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            try {
                await this.bot.sendMessage(targetAdmin.user_id, 
                    `üì¢ –í—ã –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.\n\n` +
                    `–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –æ—Ç–æ–∑–≤–∞–Ω.`
                );
            } catch (error) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:', error.message);
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
            this.userStates.delete(userId);
        }
    }

    async formatMatchInfo(match, userId) {
        const matchTime = moment(match.match_date);
        const isStarted = moment().isAfter(matchTime);
        
        let text = `‚öΩ **${match.team_a}** ‚Äî **${match.team_b}**\n`;
        text += `üìÖ ${matchTime.format('DD.MM.YYYY HH:mm')}\n`;
        text += `üÜî –ú–∞—Ç—á #${match.id}\n`;
        
        if (isStarted) {
            text += `‚è∞ –ü—Ä–æ–≥–Ω–æ–∑—ã –∑–∞–∫—Ä—ã—Ç—ã\n`;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        try {
            const prediction = await this.db.getPrediction(userId, match.id);
            if (prediction) {
                text += `\nüîÆ –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑: ${ScoringSystem.formatPrediction(prediction.prediction_a, prediction.prediction_b)}`;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞:', error);
        }

        return text;
    }

    getMainKeyboard() {
        return {
            keyboard: [
                [
                    { text: '‚öΩ –ú–∞—Ç—á–∏', callback_data: 'matches' },
                    { text: 'üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤', callback_data: 'leaderboard' },
                ],
                [
                    { text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' },
                    { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' },
                ],   
            ],
            resize_keyboard: true
        };
    }

    getMatchKeyboard(matchId) {
        return {
            inline_keyboard: [
                [
                    { text: 'üîÆ –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑', callback_data: `predict_${matchId}` },
                    { text: 'üîÆ –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω', callback_data: `finishmatch_${matchId}` }
                ]
            ]
        };
    }

    parseDate(dateString) {
        const date = moment(dateString, 'DD.MM.YYYY HH:mm', true);
        return date.isValid() ? date : null;
    }

    getPointsWord(points) {
        const lastDigit = points % 10;
        const lastTwoDigits = points % 100;
        
        if (lastTwoDigits >= 10 && lastTwoDigits <= 20) {
            return '–æ–≤';
        }
        
        if (lastDigit === 1) return '';
        if (lastDigit >= 2 && lastDigit <= 4) return '–∞';
        return '–æ–≤';
    }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const bot = new PredictionBot();

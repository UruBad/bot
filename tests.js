// –¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤ –¥–ª—è —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
const ScoringSystem = require('./scoring');

console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤\n');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
    green: '\x1b[32m',
    red: '\x1b[31m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    reset: '\x1b[0m',
    bold: '\x1b[1m'
};

// –°—á–µ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
let totalTests = 0;
let passedTests = 0;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
function runTest(testName, prediction, result, expectedPoints, description) {
    totalTests++;
    const [predA, predB] = prediction;
    const [resA, resB] = result;
    
    const actualPoints = ScoringSystem.calculatePoints(predA, predB, resA, resB);
    const isPass = actualPoints === expectedPoints;
    
    if (isPass) passedTests++;
    
    const status = isPass ? 
        `${colors.green}‚úÖ –ü–†–û–ô–î–ï–ù${colors.reset}` : 
        `${colors.red}‚ùå –ü–†–û–í–ê–õ–ï–ù${colors.reset}`;
    
    console.log(`${colors.bold}${totalTests}. ${testName}${colors.reset}`);
    console.log(`   –ü—Ä–æ–≥–Ω–æ–∑: ${colors.blue}${predA}:${predB}${colors.reset} | –†–µ–∑—É–ª—å—Ç–∞—Ç: ${colors.blue}${resA}:${resB}${colors.reset}`);
    console.log(`   –û–∂–∏–¥–∞–µ–º–æ: ${expectedPoints} –±–∞–ª–ª${getPointsWord(expectedPoints)} | –ü–æ–ª—É—á–µ–Ω–æ: ${actualPoints} –±–∞–ª–ª${getPointsWord(actualPoints)}`);
    console.log(`   ${status} - ${description}`);
    console.log(`   ${ScoringSystem.getPointsDescription(actualPoints)}\n`);
    
    return isPass;
}

// –ì—Ä—É–ø–ø–∞ —Ç–µ—Å—Ç–æ–≤: –¢–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (3 –±–∞–ª–ª–∞)
console.log(`${colors.yellow}üéØ –ì–†–£–ü–ü–ê 1: –¢–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (3 –±–∞–ª–ª–∞)${colors.reset}\n`);

runTest(
    '–¢–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –æ–±—ã—á–Ω—ã–π —Å—á–µ—Ç',
    [2, 1], [2, 1], 3,
    '–ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'
);

runTest(
    '–¢–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –Ω–∏—á—å—è',
    [1, 1], [1, 1], 3,
    '–¢–æ—á–Ω–æ–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ –Ω–∏—á–µ–π–Ω–æ–≥–æ —Å—á–µ—Ç–∞'
);

runTest(
    '–¢–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –∫—Ä—É–ø–Ω—ã–π —Å—á–µ—Ç',
    [4, 0], [4, 0], 3,
    '–¢–æ—á–Ω–æ–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ —Ä–∞–∑–≥—Ä–æ–º–Ω–æ–≥–æ —Å—á–µ—Ç–∞'
);

runTest(
    '–¢–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –Ω—É–ª–µ–≤–∞—è –Ω–∏—á—å—è',
    [0, 0], [0, 0], 3,
    '–¢–æ—á–Ω–æ–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ –±–µ–∑–≥–æ–ª–µ–≤–æ–π –Ω–∏—á—å–µ–π'
);

// –ì—Ä—É–ø–ø–∞ —Ç–µ—Å—Ç–æ–≤: –†–∞–∑–Ω–∏—Ü–∞ –º—è—á–µ–π –∏ –∏—Å—Ö–æ–¥ (2 –±–∞–ª–ª–∞)
console.log(`${colors.yellow}üé≤ –ì–†–£–ü–ü–ê 2: –†–∞–∑–Ω–∏—Ü–∞ –º—è—á–µ–π –∏ –∏—Å—Ö–æ–¥ (2 –±–∞–ª–ª–∞)${colors.reset}\n`);

runTest(
    '–†–∞–∑–Ω–∏—Ü–∞ +2 –∏ –ø–æ–±–µ–¥–∞ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã',
    [3, 1], [2, 0], 2,
    '–£–≥–∞–¥–∞–Ω–∞ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ 2 –º—è—á–∞ –∏ –ø–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã A'
);

runTest(
    '–†–∞–∑–Ω–∏—Ü–∞ +1 –∏ –ø–æ–±–µ–¥–∞ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã',
    [2, 1], [3, 2], 2,
    '–£–≥–∞–¥–∞–Ω–∞ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ 1 –º—è—á –∏ –ø–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã A'
);

runTest(
    '–†–∞–∑–Ω–∏—Ü–∞ -1 –∏ –ø–æ–±–µ–¥–∞ –≤—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã',
    [0, 1], [1, 2], 2,
    '–£–≥–∞–¥–∞–Ω–∞ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ 1 –º—è—á –∏ –ø–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã B'
);

runTest(
    '–†–∞–∑–Ω–∏—Ü–∞ 0 –∏ –Ω–∏—á—å—è',
    [1, 1], [2, 2], 2,
    '–£–≥–∞–¥–∞–Ω–∞ –Ω—É–ª–µ–≤–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –∏ –Ω–∏—á—å—è'
);

runTest(
    '–†–∞–∑–Ω–∏—Ü–∞ 0 –∏ –Ω–∏—á—å—è (–¥—Ä—É–≥–∏–µ —Å—á–µ—Ç–∞)',
    [0, 0], [3, 3], 2,
    '–£–≥–∞–¥–∞–Ω–∞ –Ω—É–ª–µ–≤–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –∏ –Ω–∏—á—å—è —Å –¥—Ä—É–≥–∏–º–∏ —Å—á–µ—Ç–∞–º–∏'
);

runTest(
    '–†–∞–∑–Ω–∏—Ü–∞ +3 –∏ –ø–æ–±–µ–¥–∞ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã',
    [4, 1], [3, 0], 2,
    '–£–≥–∞–¥–∞–Ω–∞ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ 3 –º—è—á–∞ –∏ –ø–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã A'
);

// –ì—Ä—É–ø–ø–∞ —Ç–µ—Å—Ç–æ–≤: –¢–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥ (1 –±–∞–ª–ª)
console.log(`${colors.yellow}‚öΩ –ì–†–£–ü–ü–ê 3: –¢–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥ (1 –±–∞–ª–ª)${colors.reset}\n`);

runTest(
    '–¢–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∞ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã',
    [2, 1], [4, 2], 1,
    '–£–≥–∞–¥–∞–Ω–∞ –ø–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã A, –Ω–æ —Ä–∞–∑–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ (+1 vs +2)'
);

runTest(
    '–†–∞–∑–Ω–∏—Ü–∞ -2 –∏ –ø–æ–±–µ–¥–∞ –≤—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã',
    [0, 2], [1, 3], 2,
    '–£–≥–∞–¥–∞–Ω–∞ —Ä–∞–∑–Ω–∏—Ü–∞ -2 –∏ –ø–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã B'
);

// –ò—Å–ø—Ä–∞–≤–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ—Å—Ç
runTest(
    '–¢–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∞ –≤—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã',
    [0, 1], [1, 3], 1,
    '–£–≥–∞–¥–∞–Ω–∞ –ø–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã B, –Ω–æ —Ä–∞–∑–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ (-1 vs -2)'
);

runTest(
    '–†–∞–∑–Ω–∏—Ü–∞ 0 –∏ –Ω–∏—á—å—è (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–∞–∑–Ω–æ—Å—Ç–∏)',
    [2, 2], [1, 1], 2,
    '–£–≥–∞–¥–∞–Ω–∞ —Ä–∞–∑–Ω–æ—Å—Ç—å 0 –∏ –Ω–∏—á—å—è'
);

// –ñ–¥–∏—Ç–µ, —ç—Ç–æ —Ç–æ–∂–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ò—Å–ø—Ä–∞–≤–∏–º:
runTest(
    '–†–∞–∑–Ω–∏—Ü–∞ 0 –∏ –Ω–∏—á—å—è (–¥—Ä—É–≥–∏–µ —Å—á–µ—Ç–∞)',
    [1, 1], [0, 0], 2,
    '–£–≥–∞–¥–∞–Ω–∞ —Ä–∞–∑–Ω–æ—Å—Ç—å 0 –∏ –Ω–∏—á—å—è (–≤—Å–µ –Ω–∏—á—å–∏ –∏–º–µ—é—Ç —Ä–∞–∑–Ω–æ—Å—Ç—å 0)'
);

// –ì—Ä—É–ø–ø–∞ —Ç–µ—Å—Ç–æ–≤: –ü—Ä–æ–º–∞—Ö (0 –±–∞–ª–ª–æ–≤)
console.log(`${colors.yellow}‚ùå –ì–†–£–ü–ü–ê 4: –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–∞—Ö (0 –±–∞–ª–ª–æ–≤)${colors.reset}\n`);

runTest(
    '–ù–∏—á—å—è vs –ü–æ–±–µ–¥–∞ A',
    [1, 1], [2, 0], 0,
    '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∏—á—å–∏, –∞ –ø–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ A'
);

runTest(
    '–ü–æ–±–µ–¥–∞ A vs –ü–æ–±–µ–¥–∞ B',
    [2, 0], [0, 3], 0,
    '–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–±–µ–¥—ã A, –∞ –ø–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ B'
);

runTest(
    '–ü–æ–±–µ–¥–∞ B vs –ù–∏—á—å—è',
    [0, 2], [1, 1], 0,
    '–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–±–µ–¥—ã B, –∞ –ø–æ–ª—É—á–∏–ª–∞—Å—å –Ω–∏—á—å—è'
);

runTest(
    '–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
    [3, 0], [0, 4], 0,
    '–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'
);

// –ì—Ä—É–ø–ø–∞ —Ç–µ—Å—Ç–æ–≤: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
console.log(`${colors.yellow}üî¨ –ì–†–£–ü–ü–ê 5: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏${colors.reset}\n`);

runTest(
    '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π —Å—á–µ—Ç',
    [20, 20], [20, 20], 3,
    '–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)'
);

runTest(
    '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—á–µ—Ç',
    [0, 0], [0, 0], 3,
    '–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)'
);

runTest(
    '–ë–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –º—è—á–µ–π',
    [10, 0], [15, 5], 2,
    '–£–≥–∞–¥–∞–Ω–∞ —Ä–∞–∑–Ω–æ—Å—Ç—å +10 –∏ –ø–æ–±–µ–¥–∞ –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö —Å—á–µ—Ç–∞—Ö'
);

// –ì—Ä—É–ø–ø–∞ —Ç–µ—Å—Ç–æ–≤: –†–µ–∞–ª—å–Ω—ã–µ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
console.log(`${colors.yellow}‚öΩ –ì–†–£–ü–ü–ê 6: –†–µ–∞–ª—å–Ω—ã–µ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏${colors.reset}\n`);

runTest(
    '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –¥–µ—Ä–±–∏',
    [1, 0], [1, 0], 3,
    '–¢–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø–æ–±–µ–¥—ã'
);

runTest(
    '–†–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–∞—è –Ω–∏—á—å—è',
    [2, 2], [3, 3], 2,
    '–£–≥–∞–¥–∞–Ω–∞ —Ä–∞–∑–Ω–∏—Ü–∞ –∏ –∏—Å—Ö–æ–¥ –ø—Ä–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ'
);

runTest(
    '–°–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–±–µ–¥–∞ –∞—É—Ç—Å–∞–π–¥–µ—Ä–∞',
    [0, 1], [0, 2], 1,
    '–£–≥–∞–¥–∞–Ω —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥ –ø—Ä–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ'
);

runTest(
    '–†–∞–∑–≥—Ä–æ–º —Ñ–∞–≤–æ—Ä–∏—Ç–æ–º',
    [3, 0], [4, 1], 2,
    '–£–≥–∞–¥–∞–Ω–∞ —Ä–∞–∑–Ω–æ—Å—Ç—å +3 –∏ –ø–æ–±–µ–¥–∞ –ø—Ä–∏ —Ä–∞–∑–≥—Ä–æ–º–Ω—ã—Ö —Å—á–µ—Ç–∞—Ö'
);

runTest(
    '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –Ω–∏—á—å—è',
    [1, 1], [0, 0], 2,
    '–£–≥–∞–¥–∞–Ω–∞ —Ä–∞–∑–Ω–æ—Å—Ç—å 0 –∏ –Ω–∏—á—å—è'
);

runTest(
    '–†–µ–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π - —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥ –ø–æ–±–µ–¥—ã',
    [2, 0], [3, 1], 2,
    '–£–≥–∞–¥–∞–Ω–∞ —Ä–∞–∑–Ω–æ—Å—Ç—å +2 –∏ –ø–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã A'
);

// –ò—Å–ø—Ä–∞–≤–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ—Å—Ç
runTest(
    '–î—Ä–∞–º–∞—Ç–∏—á–Ω–∞—è –Ω–∏—á—å—è',
    [1, 1], [2, 2], 2,
    '–£–≥–∞–¥–∞–Ω–∞ —Ä–∞–∑–Ω–æ—Å—Ç—å 0 –∏ –Ω–∏—á—å—è –≤ –¥—Ä–∞–º–∞—Ç–∏—á–Ω–æ–º –º–∞—Ç—á–µ'
);

// –ì—Ä—É–ø–ø–∞ —Ç–µ—Å—Ç–æ–≤: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
console.log(`${colors.yellow}üîç –ì–†–£–ü–ü–ê 7: –¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏${colors.reset}\n`);

function testValidation(predA, predB, expectedValid, description) {
    totalTests++;
    const isValid = ScoringSystem.isValidPrediction(predA, predB);
    const isPass = isValid === expectedValid;
    
    if (isPass) passedTests++;
    
    const status = isPass ? 
        `${colors.green}‚úÖ –ü–†–û–ô–î–ï–ù${colors.reset}` : 
        `${colors.red}‚ùå –ü–†–û–í–ê–õ–ï–ù${colors.reset}`;
    
    console.log(`${colors.bold}${totalTests}. –í–∞–ª–∏–¥–∞—Ü–∏—è: ${predA}:${predB}${colors.reset}`);
    console.log(`   –û–∂–∏–¥–∞–µ–º–æ: ${expectedValid ? '–≤–∞–ª–∏–¥–Ω–æ' : '–Ω–µ–≤–∞–ª–∏–¥–Ω–æ'} | –ü–æ–ª—É—á–µ–Ω–æ: ${isValid ? '–≤–∞–ª–∏–¥–Ω–æ' : '–Ω–µ–≤–∞–ª–∏–¥–Ω–æ'}`);
    console.log(`   ${status} - ${description}\n`);
    
    return isPass;
}

testValidation(2, 1, true, '–û–±—ã—á–Ω—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑');
testValidation(0, 0, true, '–ù—É–ª–µ–≤–æ–π —Å—á–µ—Ç (–≤–∞–ª–∏–¥–Ω–æ)');
testValidation(20, 20, true, '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—á–µ—Ç');
testValidation(-1, 0, false, '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–µ–≤–∞–ª–∏–¥–Ω–æ)');
testValidation(21, 0, false, '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –º–∞–∫—Å–∏–º—É–º–∞ (–Ω–µ–≤–∞–ª–∏–¥–Ω–æ)');
testValidation(1.5, 2, false, '–î—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–µ–≤–∞–ª–∏–¥–Ω–æ)');

// –ì—Ä—É–ø–ø–∞ —Ç–µ—Å—Ç–æ–≤: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
console.log(`${colors.yellow}üõ† –ì–†–£–ü–ü–ê 8: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏${colors.reset}\n`);

function testOutcome(goalsA, goalsB, expectedOutcome, description) {
    totalTests++;
    const outcome = ScoringSystem.getOutcome(goalsA, goalsB);
    const isPass = outcome === expectedOutcome;
    
    if (isPass) passedTests++;
    
    const status = isPass ? 
        `${colors.green}‚úÖ –ü–†–û–ô–î–ï–ù${colors.reset}` : 
        `${colors.red}‚ùå –ü–†–û–í–ê–õ–ï–ù${colors.reset}`;
    
    console.log(`${colors.bold}${totalTests}. –ò—Å—Ö–æ–¥ ${goalsA}:${goalsB}${colors.reset}`);
    console.log(`   –û–∂–∏–¥–∞–µ–º–æ: ${expectedOutcome} | –ü–æ–ª—É—á–µ–Ω–æ: ${outcome}`);
    console.log(`   ${status} - ${description}\n`);
    
    return isPass;
}

testOutcome(2, 1, 'win_a', '–ü–æ–±–µ–¥–∞ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã');
testOutcome(0, 3, 'win_b', '–ü–æ–±–µ–¥–∞ –≤—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã');
testOutcome(1, 1, 'draw', '–ù–∏—á—å—è');
testOutcome(0, 0, 'draw', '–ë–µ–∑–≥–æ–ª–µ–≤–∞—è –Ω–∏—á—å—è');

// –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
console.log(`${colors.bold}${colors.blue}üèÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø${colors.reset}\n`);
console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${colors.bold}${totalTests}${colors.reset}`);
console.log(`–ü—Ä–æ–π–¥–µ–Ω–æ: ${colors.green}${colors.bold}${passedTests}${colors.reset}`);
console.log(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${colors.red}${colors.bold}${totalTests - passedTests}${colors.reset}`);

const successRate = ((passedTests / totalTests) * 100).toFixed(1);
console.log(`–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${colors.bold}${successRate}%${colors.reset}\n`);

if (passedTests === totalTests) {
    console.log(`${colors.green}${colors.bold}üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.${colors.reset}`);
} else {
    console.log(`${colors.red}${colors.bold}‚ö†Ô∏è  –ï–°–¢–¨ –û–®–ò–ë–ö–ò! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã.${colors.reset}`);
}

console.log('\n' + '='.repeat(60));
console.log(`${colors.blue}–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞${colors.reset}`);
console.log(`${colors.yellow}–î–ª—è –∑–∞–ø—É—Å–∫–∞: node tests.js${colors.reset}`);

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–±–∞–ª–ª"
function getPointsWord(points) {
    const lastDigit = points % 10;
    const lastTwoDigits = points % 100;
    
    if (lastTwoDigits >= 10 && lastTwoDigits <= 20) {
        return '–æ–≤';
    }
    
    if (lastDigit === 1) return '';
    if (lastDigit >= 2 && lastDigit <= 4) return '–∞';
    return '–æ–≤';
}

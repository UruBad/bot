#!/usr/bin/env node

const { exec, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

const PID_FILE = path.join(__dirname, 'bot.pid');

function getPid() {
    try {
        if (fs.existsSync(PID_FILE)) {
            const pid = parseInt(fs.readFileSync(PID_FILE, 'utf8').trim());
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            try {
                process.kill(pid, 0);
                return pid;
            } catch (e) {
                // –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π PID —Ñ–∞–π–ª
                fs.unlinkSync(PID_FILE);
                return null;
            }
        }
        return null;
    } catch (e) {
        return null;
    }
}

function savePid(pid) {
    fs.writeFileSync(PID_FILE, pid.toString());
}

function removePidFile() {
    if (fs.existsSync(PID_FILE)) {
        fs.unlinkSync(PID_FILE);
    }
}

function startBot() {
    const existingPid = getPid();
    if (existingPid) {
        console.log(`ü§ñ –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: ${existingPid})`);
        return;
    }

    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...');
    const botProcess = spawn('node', ['index.js'], {
        detached: true,
        stdio: ['ignore', 'pipe', 'pipe']
    });

    savePid(botProcess.pid);
    console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: ${botProcess.pid})`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 3 —Å–µ–∫—É–Ω–¥
    let outputShown = false;
    botProcess.stdout.on('data', (data) => {
        if (!outputShown) {
            console.log('üìù –í—ã–≤–æ–¥ –±–æ—Ç–∞:');
            outputShown = true;
        }
        console.log(data.toString());
    });

    botProcess.stderr.on('data', (data) => {
        if (!outputShown) {
            console.log('üìù –í—ã–≤–æ–¥ –±–æ—Ç–∞:');
            outputShown = true;
        }
        console.error(data.toString());
    });

    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        botProcess.unref();
        console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞. –ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –≤ —Ñ–æ–Ω–µ.');
    }, 3000);
}

function stopBot() {
    const pid = getPid();
    if (!pid) {
        console.log('‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω');
        return;
    }

    console.log(`üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞ (PID: ${pid})...`);
    try {
        process.kill(pid, 'SIGTERM');
        removePidFile();
        console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞:', e.message);
        removePidFile(); // –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    }
}

function restartBot() {
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
    stopBot();
    setTimeout(() => {
        startBot();
    }, 2000);
}

function statusBot() {
    const pid = getPid();
    if (pid) {
        console.log(`üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: ${pid})`);
    } else {
        console.log('üî¥ –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const command = process.argv[2];

switch (command) {
    case 'start':
        startBot();
        break;
    case 'stop':
        stopBot();
        break;
    case 'restart':
        restartBot();
        break;
    case 'status':
        statusBot();
        break;
    default:
        console.log('ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º –ø—Ä–æ–≥–Ω–æ–∑–æ–≤');
        console.log('');
        console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
        console.log('  node bot-control.js start    - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞');
        console.log('  node bot-control.js stop     - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞');
        console.log('  node bot-control.js restart  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞');
        console.log('  node bot-control.js status   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞');
        console.log('');
        console.log('–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ npm –∫–æ–º–∞–Ω–¥—ã:');
        console.log('  npm start     - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞');
        console.log('  npm run stop  - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞');
        console.log('  npm run restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞');
        console.log('  npm run status  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞');
        break;
}
